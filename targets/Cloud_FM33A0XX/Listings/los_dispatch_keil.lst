


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       ---------------------
    2 00000000         ; Copyright (c) <2016-2018>, <Huawei Technologies Co., L
                       td>
    3 00000000         ; All rights reserved.
    4 00000000         ; Redistribution and use in source and binary forms, wit
                       h or without modification,
    5 00000000         ; are permitted provided that the following conditions a
                       re met:
    6 00000000         ; 1. Redistributions of source code must retain the abov
                       e copyright notice, this list of
    7 00000000         ; conditions and the following disclaimer.
    8 00000000         ; 2. Redistributions in binary form must reproduce the a
                       bove copyright notice, this list
    9 00000000         ; of conditions and the following disclaimer in the docu
                       mentation and/or other materials
   10 00000000         ; provided with the distribution.
   11 00000000         ; 3. Neither the name of the copyright holder nor the na
                       mes of its contributors may be used
   12 00000000         ; to endorse or promote products derived from this softw
                       are without specific prior written
   13 00000000         ; permission.
   14 00000000         ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
                        CONTRIBUTORS
   15 00000000         ; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDI
                       NG, BUT NOT LIMITED TO,
   16 00000000         ; THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
                       FOR A PARTICULAR
   17 00000000         ; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGH
                       T HOLDER OR
   18 00000000         ; CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCID
                       ENTAL, SPECIAL,
   19 00000000         ; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NO
                       T LIMITED TO,
   20 00000000         ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF U
                       SE, DATA, OR PROFITS;
   21 00000000         ; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY TH
                       EORY OF LIABILITY,
   22 00000000         ; WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUD
                       ING NEGLIGENCE OR
   23 00000000         ; OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS S
                       OFTWARE, EVEN IF
   24 00000000         ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   25 00000000         ;-------------------------------------------------------
                       --------------------*/
   26 00000000         ;-------------------------------------------------------
                       ---------------------
   27 00000000         ; Notice of Export Control Law
   28 00000000         ; ===============================================
   29 00000000         ; Huawei LiteOS may be subject to applicable export cont
                       rol laws and regulations, which might
   30 00000000         ; include those applicable to Huawei LiteOS of U.S. and 
                       the country in which you are located.
   31 00000000         ; Import, export and usage of Huawei LiteOS in any manne
                       r by you shall be in compliance with such
   32 00000000         ; applicable export control laws and regulations.
   33 00000000         ;-------------------------------------------------------
                       --------------------*/
   34 00000000         



ARM Macro Assembler    Page 2 


   35 00000000         ;*******************************************************
                       *********************************
   36 00000000         ;                                  EXPORT FUNCTIONS
   37 00000000         ;*******************************************************
                       *********************************
   38 00000000         
   39 00000000                 EXPORT           LOS_IntLock
   40 00000000                 EXPORT           LOS_IntUnLock
   41 00000000                 EXPORT           LOS_IntRestore
   42 00000000                 EXPORT           LOS_StartToRun
   43 00000000                 EXPORT           osTaskSchedule
   44 00000000                 EXPORT           osPendSV
   45 00000000         
   46 00000000         ;*******************************************************
                       *********************************
   47 00000000         ;                                  EXTERN PARAMETERS
   48 00000000         ;*******************************************************
                       *********************************
   49 00000000         
   50 00000000                 IMPORT           g_stLosTask
   51 00000000                 IMPORT           g_pfnTskSwitchHook
   52 00000000                 IMPORT           g_bTaskScheduled
   53 00000000         
   54 00000000         ;*******************************************************
                       *********************************
   55 00000000         ;                                  EQU
   56 00000000         ;*******************************************************
                       *********************************
   57 00000000         
   58 00000000 E000ED04 
                       OS_NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt Control
                                                             and State Register
                                                            .
   59 00000000 10000000 
                       OS_NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   60 00000000         
   61 00000000 E000ED20 
                       OS_NVIC_SYSPRI2
                               EQU              0xE000ED20  ; System Handler Pr
                                                            iority Register 2.
   62 00000000 C0C00000 
                       OS_NVIC_PENDSV_SYSTICK_PRI
                               EQU              0xC0C00000  ; SysTick + PendSV 
                                                            priority level (low
                                                            est).
   63 00000000         
   64 00000000 00000010 
                       OS_TASK_STATUS_RUNNING
                               EQU              0x0010      ; Task Status Flag 
                                                            (RUNNING).
   65 00000000         
   66 00000000         ;*******************************************************
                       *********************************
   67 00000000         ;                                  CODE GENERATION DIREC
                       TIVES
   68 00000000         ;*******************************************************



ARM Macro Assembler    Page 3 


                       *********************************
   69 00000000         
   70 00000000                 AREA             |.text|, CODE, READONLY
   71 00000000                 THUMB
   72 00000000                 REQUIRE8
   73 00000000                 PRESERVE8
   74 00000000         
   75 00000000         ;*******************************************************
                       *********************************
   76 00000000         ; Function:
   77 00000000         ;        VOID LOS_StartToRun(VOID);
   78 00000000         ; Description:
   79 00000000         ;        Start the first task, which is the highest prio
                       rity task in the priority queue.
   80 00000000         ;        Other tasks are started by task scheduling.
   81 00000000         ;*******************************************************
                       *********************************
   82 00000000         LOS_StartToRun
   83 00000000 B672            CPSID            I
   84 00000002         
   85 00000002         ;/**
   86 00000002         ; * Set PendSV and SysTick prority to the lowest.
   87 00000002         ; * read ---> modify ---> write-back.
   88 00000002         ; */
   89 00000002 4832            LDR              R0, =OS_NVIC_SYSPRI2
   90 00000004 4932            LDR              R1, =OS_NVIC_PENDSV_SYSTICK_PRI
   91 00000006 6802            LDR              R2, [R0]
   92 00000008 4311            ORRS             R1, R1, R2
   93 0000000A 6001            STR              R1, [R0]
   94 0000000C         
   95 0000000C         ;/**
   96 0000000C         ; * Set g_bTaskScheduled = 1.
   97 0000000C         ; */
   98 0000000C 4831            LDR              R0, =g_bTaskScheduled
   99 0000000E 2101            MOVS             R1, #1
  100 00000010 6001            STR              R1, [R0]
  101 00000012         
  102 00000012         ;/**
  103 00000012         ; * Now PSP is an invalid value, R13 uses MSP as the sta
                       ck pointer.
  104 00000012         ; * After setting the control register, R13 will switch 
                       to PSP.
  105 00000012         ; * To ensure that R13 is valid, set PSP = MSP.
  106 00000012         ; */
  107 00000012 F3EF 8008       MRS              R0, MSP
  108 00000016 F380 8809       MSR              PSP, R0
  109 0000001A         
  110 0000001A         ;/**
  111 0000001A         ; * Set the CONTROL register, after schedule start, priv
                       ilege level and stack = PSP.
  112 0000001A         ; */
  113 0000001A 2002            MOVS             R0, #2
  114 0000001C F380 8814       MSR              CONTROL, R0
  115 00000020         
  116 00000020         ;/**
  117 00000020         ; * Set g_stLosTask.pstRunTask = g_stLosTask.pstNewTask.
                       
  118 00000020         ; */
  119 00000020 482D            LDR              R0, =g_stLosTask



ARM Macro Assembler    Page 4 


  120 00000022 6841            LDR              R1, [R0, #4]
  121 00000024 6001            STR              R1, [R0]
  122 00000026         
  123 00000026         ;/**
  124 00000026         ; * Set g_stLosTask.pstRunTask->usTaskStatus |= OS_TASK_
                       STATUS_RUNNING.
  125 00000026         ; */
  126 00000026 6801            LDR              R1, [R0]
  127 00000028 888A            LDRH             R2, [R1, #4]
  128 0000002A 2310            MOVS             R3, #OS_TASK_STATUS_RUNNING
  129 0000002C 431A            ORRS             R2, R2, R3
  130 0000002E 808A            STRH             R2, [R1, #4]
  131 00000030         
  132 00000030         ;/**
  133 00000030         ; * Restore the default stack frame(R0-R3,R12,LR,PC,xPSR
                       ) of g_stLosTask.pstRunTask to R0-R7.
  134 00000030         ; * Return by setting the CONTROL register.
  135 00000030         ; */
  136 00000030 680B            LDR              R3, [R1]
  137 00000032 3324            ADDS             R3, R3, #36 ; skip R4-R11, PRIM
                                                            ASK.
  138 00000034         
  139 00000034 CB07            LDMFD            R3!, {R0-R2} ; restore R0-R2.
  140 00000036 1D1B            ADDS             R3, R3, #4  ; skip R3.
  141 00000038 CBF0            LDMFD            R3!, {R4-R7} ; restore R12,LR,P
                                                            C,xPSR.
  142 0000003A         
  143 0000003A         ;/**
  144 0000003A         ; * Set the stack pointer of g_stLosTask.pstRunTask to P
                       SP.
  145 0000003A         ; */
  146 0000003A F383 8809       MSR              PSP, R3
  147 0000003E         
  148 0000003E 3B14            SUBS             R3, R3, #20
  149 00000040 681B            LDR              R3, [R3]    ; restore R3.
  150 00000042         
  151 00000042         ;/**
  152 00000042         ; * Enable interrupt. (The default PRIMASK value is 0, s
                       o enable directly)
  153 00000042         ; */
  154 00000042 46AE            MOV              LR, R5
  155 00000044 B662            CPSIE            I
  156 00000046         
  157 00000046         ;/**
  158 00000046         ; * Jump directly to the default PC of g_stLosTask.pstRu
                       nTask, the field information
  159 00000046         ; * of the main function will be destroyed and will neve
                       r be returned.
  160 00000046         ; */
  161 00000046 4730            BX               R6
  162 00000048         
  163 00000048         ;*******************************************************
                       *********************************
  164 00000048         ; Function:
  165 00000048         ;        UINTPTR LOS_IntLock(VOID);
  166 00000048         ; Description:
  167 00000048         ;        Disable all interrupts except Reset,NMI and Har
                       dFault.
  168 00000048         ;        The value of currnet interruption state will be



ARM Macro Assembler    Page 5 


                        returned to the caller to save.
  169 00000048         ;
  170 00000048         ; Function:
  171 00000048         ;        VOID LOS_IntRestore(UINTPTR uvIntSave);
  172 00000048         ; Description:
  173 00000048         ;        Restore the locked interruption of LOS_IntLock.
                       
  174 00000048         ;        The caller must pass in the value of interrupti
                       on state previously saved.
  175 00000048         ;*******************************************************
                       *********************************
  176 00000048         LOS_IntLock
  177 00000048 F3EF 8010       MRS              R0, PRIMASK
  178 0000004C B672            CPSID            I
  179 0000004E 4770            BX               LR
  180 00000050         
  181 00000050         LOS_IntUnLock
  182 00000050 F3EF 8010       MRS              R0, PRIMASK
  183 00000054 B662            CPSIE            I
  184 00000056 4770            BX               LR
  185 00000058         
  186 00000058         LOS_IntRestore
  187 00000058 F380 8810       MSR              PRIMASK, R0
  188 0000005C 4770            BX               LR
  189 0000005E         
  190 0000005E         ;*******************************************************
                       *********************************
  191 0000005E         ; Function:
  192 0000005E         ;        VOID osTaskSchedule(VOID);
  193 0000005E         ; Description:
  194 0000005E         ;        Start the task swtich process by software trigg
                       er PendSV interrupt.
  195 0000005E         ;*******************************************************
                       *********************************
  196 0000005E         osTaskSchedule
  197 0000005E 481F            LDR              R0, =OS_NVIC_INT_CTRL
  198 00000060 491F            LDR              R1, =OS_NVIC_PENDSVSET
  199 00000062 6001            STR              R1, [R0]
  200 00000064 4770            BX               LR
  201 00000066         
  202 00000066         ;*******************************************************
                       *********************************
  203 00000066         ; Function:
  204 00000066         ;        VOID osPendSV(VOID);
  205 00000066         ; Description:
  206 00000066         ;        PendSV interrupt handler, switch the context of
                        the task.
  207 00000066         ;        First: Save the context of the current running 
                       task(g_stLosTask.pstRunTask)
  208 00000066         ;               to its own stack.
  209 00000066         ;        Second: Restore the context of the next running
                        task(g_stLosTask.pstNewTask)
  210 00000066         ;                from its own stack.
  211 00000066         ;*******************************************************
                       *********************************
  212 00000066         osPendSV
  213 00000066         ;/**
  214 00000066         ; * R12: Save the interruption state of the current runn
                       ing task.



ARM Macro Assembler    Page 6 


  215 00000066         ; * Disable all interrupts except Reset,NMI and HardFaul
                       t
  216 00000066         ; */
  217 00000066 F3EF 8C10       MRS              R12, PRIMASK
  218 0000006A B672            CPSID            I
  219 0000006C         
  220 0000006C         ;/**
  221 0000006C         ; * Call task switch hook.
  222 0000006C         ; */
  223 0000006C 4A1D            LDR              R2, =g_pfnTskSwitchHook
  224 0000006E 6812            LDR              R2, [R2]
  225 00000070 2A00            CMP              R2, #0
  226 00000072 D004            BEQ              TaskSwitch
  227 00000074 4671            MOV              R1, LR
  228 00000076 B403            PUSH             {R0, R1}
  229 00000078 4790            BLX              R2
  230 0000007A BC03            POP              {R0, R1}
  231 0000007C 468E            MOV              LR, R1
  232 0000007E         
  233 0000007E         TaskSwitch
  234 0000007E         ;/**
  235 0000007E         ; * R0 = now stack pointer of the current running task.
  236 0000007E         ; */
  237 0000007E F3EF 8009       MRS              R0, PSP
  238 00000082         
  239 00000082         ;/**
  240 00000082         ; * Save the stack frame(R4-R11) of the current running 
                       task.
  241 00000082         ; * R12 save the PRIMASK value of the current running ta
                       sk.
  242 00000082         ; * NOTE: Before entering the exception handler function
                       , these registers
  243 00000082         ; *       (xPSR,PC,LR,R12,R3-R0) have been automatically
                       
  244 00000082         ; *       saved by the CPU in the stack of the current r
                       unning task.
  245 00000082         ; */
  246 00000082 3824            SUBS             R0, #36
  247 00000084 C0F0            STMIA            R0!, {R4-R7} ; save R4-R7.
  248 00000086 4643            MOV              R3, R8      ; copy R8-r12 to R3
                                                            -r7.
  249 00000088 464C            MOV              R4, R9
  250 0000008A 4655            MOV              R5, R10
  251 0000008C 465E            MOV              R6, R11
  252 0000008E 4667            MOV              R7, R12
  253 00000090 C0F8            STMIA            R0!, {R3-R7} ; save R8-R12.
  254 00000092 3824            SUBS             R0, #36
  255 00000094         
  256 00000094         ;/**
  257 00000094         ; * R5,R3.
  258 00000094         ; */
  259 00000094 4D10            LDR              R5, =g_stLosTask
  260 00000096 2310            MOVS             R3, #OS_TASK_STATUS_RUNNING
  261 00000098         
  262 00000098         ;/**
  263 00000098         ; * Save the stack pointer of the current running task t
                       o TCB.
  264 00000098         ; * (g_stLosTask.pstRunTask->pStackPointer = R0)
  265 00000098         ; */



ARM Macro Assembler    Page 7 


  266 00000098 682E            LDR              R6, [R5]
  267 0000009A 6030            STR              R0, [R6]
  268 0000009C         
  269 0000009C         ;/**
  270 0000009C         ; * Clear the RUNNING state of the current running task.
                       
  271 0000009C         ; * (g_stLosTask.pstRunTask->usTaskStatus &= ~OS_TASK_ST
                       ATUS_RUNNING)
  272 0000009C         ; */
  273 0000009C 88B7            LDRH             R7, [R6, #4]
  274 0000009E 439F            BICS             R7, R7, R3
  275 000000A0 80B7            STRH             R7, [R6, #4]
  276 000000A2         
  277 000000A2         ;/**
  278 000000A2         ; * Switch the current running task to the next running 
                       task.
  279 000000A2         ; * (g_stLosTask.pstRunTask = g_stLosTask.pstNewTask)
  280 000000A2         ; */
  281 000000A2 6868            LDR              R0, [R5, #4]
  282 000000A4 6028            STR              R0, [R5]
  283 000000A6         
  284 000000A6         ;/**
  285 000000A6         ; * Set the RUNNING state of the next running task.
  286 000000A6         ; * (g_stLosTask.pstNewTask->usTaskStatus |= OS_TASK_STA
                       TUS_RUNNING)
  287 000000A6         ; */
  288 000000A6 8887            LDRH             R7, [R0, #4]
  289 000000A8 431F            ORRS             R7, R7, R3
  290 000000AA 8087            STRH             R7, [R0, #4]
  291 000000AC         
  292 000000AC         ;/**
  293 000000AC         ; * Restore the stack pointer of the next running task f
                       rom TCB.
  294 000000AC         ; * (R1 = g_stLosTask.pstNewTask->pStackPointer)
  295 000000AC         ; */
  296 000000AC 6801            LDR              R1, [R0]
  297 000000AE         
  298 000000AE         ;/**
  299 000000AE         ; * Restore the stack frame(R4-R11) of the next running 
                       task.
  300 000000AE         ; * R12 restore the PRIMASK value of the next running ta
                       sk.
  301 000000AE         ; * NOTE: After exiting the exception handler function, 
                       these registers
  302 000000AE         ; *       (xPSR,R0-R3,R12,LR,PC) will be automatically
  303 000000AE         ; *       restored by the CPU from the stack of the next
                        running task.
  304 000000AE         ; */
  305 000000AE 3110            ADDS             R1, #16
  306 000000B0 C9F8            LDMFD            R1!, {R3-R7} ; restore R8-R12 t
                                                            o R3-R7.
  307 000000B2 4698            MOV              R8, R3      ; copy R3-R7 to R8-
                                                            R12.
  308 000000B4 46A1            MOV              R9, R4
  309 000000B6 46AA            MOV              R10, R5
  310 000000B8 46B3            MOV              R11, R6
  311 000000BA 46BC            MOV              R12, R7
  312 000000BC         ;/**
  313 000000BC         ; * Set the stack pointer of the next running task to PS



ARM Macro Assembler    Page 8 


                       P.
  314 000000BC         ; */
  315 000000BC F381 8809       MSR              PSP, R1
  316 000000C0 3924            SUBS             R1, #36
  317 000000C2 C9F0            LDMFD            R1!, {R4-R7} ; restore R4-R7.
  318 000000C4         
  319 000000C4         ;/**
  320 000000C4         ; * Restore the interruption state of the next running t
                       ask.
  321 000000C4         ; */
  322 000000C4 F38C 8810       MSR              PRIMASK, R12
  323 000000C8 4770            BX               LR
  324 000000CA         
  325 000000CA 00 00           ALIGN
  326 000000CC                 END
              E000ED20 
              C0C00000 
              00000000 
              00000000 
              E000ED04 
              10000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --apcs=interw
ork --depend=.\objects\los_dispatch_keil.d -o.\objects\los_dispatch_keil.o -ID:
\mywork\LiteOS\targets\Cloud_FM33A0XX\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0
\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\FM33A0XX_DFP\0.2.02\Device\Include --
predefine="__UVISION_VERSION SETA 517" --predefine="_RTE_ SETA 1" --list=.\list
ings\los_dispatch_keil.lst ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_kei
l.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 70 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
   Uses
      None
Comment: .text unused
LOS_IntLock 00000048

Symbol: LOS_IntLock
   Definitions
      At line 176 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S
   Uses
      At line 39 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
Comment: LOS_IntLock used once
LOS_IntRestore 00000058

Symbol: LOS_IntRestore
   Definitions
      At line 186 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S
   Uses
      At line 41 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
Comment: LOS_IntRestore used once
LOS_IntUnLock 00000050

Symbol: LOS_IntUnLock
   Definitions
      At line 181 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S
   Uses
      At line 40 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
Comment: LOS_IntUnLock used once
LOS_StartToRun 00000000

Symbol: LOS_StartToRun
   Definitions
      At line 82 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
   Uses
      At line 42 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
Comment: LOS_StartToRun used once
TaskSwitch 0000007E

Symbol: TaskSwitch
   Definitions
      At line 233 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S
   Uses
      At line 226 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S
Comment: TaskSwitch used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

osPendSV 00000066

Symbol: osPendSV
   Definitions
      At line 212 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S
   Uses
      At line 44 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
Comment: osPendSV used once
osTaskSchedule 0000005E

Symbol: osTaskSchedule
   Definitions
      At line 196 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S
   Uses
      At line 43 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
Comment: osTaskSchedule used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

OS_NVIC_INT_CTRL E000ED04

Symbol: OS_NVIC_INT_CTRL
   Definitions
      At line 58 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
   Uses
      At line 197 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S
Comment: OS_NVIC_INT_CTRL used once
OS_NVIC_PENDSVSET 10000000

Symbol: OS_NVIC_PENDSVSET
   Definitions
      At line 59 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
   Uses
      At line 198 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S
Comment: OS_NVIC_PENDSVSET used once
OS_NVIC_PENDSV_SYSTICK_PRI C0C00000

Symbol: OS_NVIC_PENDSV_SYSTICK_PRI
   Definitions
      At line 62 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
   Uses
      At line 90 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
Comment: OS_NVIC_PENDSV_SYSTICK_PRI used once
OS_NVIC_SYSPRI2 E000ED20

Symbol: OS_NVIC_SYSPRI2
   Definitions
      At line 61 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
   Uses
      At line 89 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
Comment: OS_NVIC_SYSPRI2 used once
OS_TASK_STATUS_RUNNING 00000010

Symbol: OS_TASK_STATUS_RUNNING
   Definitions
      At line 64 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
   Uses
      At line 128 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S
      At line 260 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S

5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

g_bTaskScheduled 00000000

Symbol: g_bTaskScheduled
   Definitions
      At line 52 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
   Uses
      At line 98 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
Comment: g_bTaskScheduled used once
g_pfnTskSwitchHook 00000000

Symbol: g_pfnTskSwitchHook
   Definitions
      At line 51 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
   Uses
      At line 223 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S
Comment: g_pfnTskSwitchHook used once
g_stLosTask 00000000

Symbol: g_stLosTask
   Definitions
      At line 50 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil.
S
   Uses
      At line 119 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S
      At line 259 in file ..\..\arch\arm\arm-m\cortex-m0\keil\los_dispatch_keil
.S

3 symbols
350 symbols in table
